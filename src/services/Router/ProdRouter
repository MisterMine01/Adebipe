<?php

namespace Api\Services;

// CODE OF USES GOES HERE

class Router
{
    /**
     * All routes of the application
     * @var array
     */
    private array $routes = ["ROUTES GO HERE"];

    /**
     * Mime types
     * @var array
     */
    private array $mime = ["MIME TYPES GO HERE"];

    /**
     * Logger
     * @var Logger
     */
    private Logger $logger;

    /**
     * Constructor
     * @param Logger $logger
     */
    public function __construct(Logger $logger)
    {
        $this->logger = $logger;
    }

    // CODE OF ROUTES GOES HERE


    /**
     * Get the the id of the route and assign is value from the uri
     */
    public function perform_regex(string $route, string $regex_route, string $uri): array
    {
        $this->logger->info('Perform regex for route: ' . $route);

        $to_inject = [];
        
        preg_match_all('/\{([a-zA-Z0-9_]+)\}/', $route, $matches);
        $id = $matches[0];
        $this->logger->info('Get id: ' . json_encode($id));
        preg_match($regex_route, $uri, $matches);
        $this->logger->info('Get matches: ' . json_encode($matches));

        for ($i = 0; $i < count($id); $i++) {
            $id_sub = substr($id[$i], 1, -1);
            $to_inject[$id_sub] = $matches[$i + 1];
        }
        $this->logger->info('Get to inject: ' . json_encode($to_inject));
        return $to_inject;
    }


    /**
     * Get the response for a request
     * @param Request $request
     * @param Injector $injector
     * @return Response
     */
    public function getResponse(\Api\Router\Request $request, Injector $injector): \Api\Router\Response
    {
        // Remove double slashes
        $request->uri = preg_replace('(\/+)', '/', $request->uri);
        if (is_file("public" . $request->uri)) {
            // The request is a file
            $this->logger->info('Get file: ' . $request->uri);
            return new \Api\Router\Response(file_get_contents("public" . $request->uri), 200, [
                'Content-Type' => $this->mime[pathinfo("public" . $request->uri, PATHINFO_EXTENSION)]
            ]);
        }
        $this->logger->info('Get response for request: ' . $request->uri);
        $add_to_injector = [
            Request::class => $request,
        ];
        $route = $request->uri;
        if (!isset($this->routes[$route])) {
            foreach ($this->routes as $key => $value) {
                if(!preg_match("/^\/.+\/[a-z]*\/$/i", $key)){
                    continue;
                }
                if (preg_match($key, $request->uri)) {
                    $this->logger->info('Regex match');
                    if (!isset($this->routes[$key][$request->method])) {
                        $this->logger->info('Method not allowed');
                        return new \Api\Router\Response('Method not allowed', 405);
                    }
                    $regex = $this->perform_regex($value[$request->method][1], $key, $request->uri);
                    $route = $key;
                    foreach ($regex as $key => $value) {
                        $add_to_injector[$key] = $value;
                    }
                    break;
                }
            }
            if ($route === $request->uri) {
                $this->logger->info('Route not found');
                return new \Api\Router\Response('Not found', 404);
            }
        }
        if (!isset($this->routes[$route][$request->method])) {
            $this->logger->info('Method not allowed');
            return new \Api\Router\Response('Method not allowed', 405);
        }
        // Execute the route with the injector (the prod router doesn't need the injector but i'm lazy)
        $route = $this->routes[$route][$request->method][0];
        $response = $injector->execute(new \ReflectionMethod($this::class . '::' . $route), null, $add_to_injector);
        if (!($response instanceof \Api\Router\Response)) {
            throw new \Exception('Response is not an instance of Response');
        }
        return $response;
    }
}
